{"version":3,"file":"component---src-pages-index-jsx-7b6885b3fcd4fffcce76.js","mappings":"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","sources":["webpack://revista-gatsby-starter/./src/components/Sidebar/indexWide.js","webpack://revista-gatsby-starter/./src/components/Hero.jsx","webpack://revista-gatsby-starter/./src/components/RecentPosts.jsx","webpack://revista-gatsby-starter/./src/components/featured/Top.jsx","webpack://revista-gatsby-starter/./src/components/featured/Trending.jsx","webpack://revista-gatsby-starter/./src/components/featured/Popular.jsx","webpack://revista-gatsby-starter/./src/components/featured/Featured.jsx","webpack://revista-gatsby-starter/./src/components/Notification.jsx","webpack://revista-gatsby-starter/./src/pages/index.jsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport About from './About'\nimport Partners from './Partners'\nimport SidebarCategories from './SidebarCategories'\nimport './sidebar-styles.scss'\n// import SidebarImage from './SidebarImage'\n\nconst SidebarWide = () => {\n  return (\n    <div className=\"col-lg-4 col-12\">\n      <SidebarStyles>\n        <About />\n        <Partners />\n        <SidebarCategories />\n        {/* <SidebarImage/> */}\n      </SidebarStyles>\n    </div>\n  )\n}\n\nconst SidebarStyles = styled.aside`\n  display: grid;\n  grid-template-columns: 200px;\n  justify-content: center;\n  row-gap: 1rem;\n  margin-top: 3.4rem;\n  @media (min-width: 576px) {\n    & {\n      grid-template-columns: repeat(auto-fit, 92%);\n      column-gap: 3rem;\n    }\n  }\n  @media screen and (max-width: 767px) {\n    grid-template-columns: calc(100vw - 30px);\n\n    margin-bottom: 3rem;\n  }\n`\n\nexport default SidebarWide\n","import React from 'react'\nimport styled from 'styled-components'\n// import { StaticImage } from 'gatsby-plugin-image'\n// import { graphql, useStaticQuery } from 'gatsby'\nimport { Link } from 'gatsby'\nimport slugify from 'slugify'\nimport { categories } from './utils/heroCategories'\n\n// export const query = graphql`\n//   {\n//     allMdx {\n//       distinct(field: frontmatter___category)\n//     }\n//   }\n//   `\n\nconst Hero = () => {\n  // const {\n  //   allMdx: {distinct},\n  // } = useStaticQuery(query);\n\n  return (\n    <HeroStyles>\n      <div className=\"hero\">\n        <div className=\"row\">\n          <div className=\"col-lg-7 col-12 hero-text\">\n            <h4>Balanced News. Finally.</h4>\n            <h1>\n              <span>Our Mantra</span>\n              <br /> Journalism You Can Trust\n            </h1>\n            <p>Delve into the truth today.</p>\n          </div>\n          <div className=\"col-lg-5 col-12\">\n            <div className=\"hero-categories\">\n              {categories.map((category, index, arr) => {\n                //check if last element. If it is, custom link for \"All Categories\"\n                if (arr.length - 1 === index) {\n                  const categoryStyles = {\n                    boxShadow: `0 0 40px`,\n                    backgroundColor: category.color,\n                    color: category.color,\n                  }\n\n                  return (\n                    <Link\n                      style={categoryStyles}\n                      className=\"hero-category\"\n                      key={index}\n                      to={`/categories`}\n                    >\n                      <div className=\"overlay\">\n                        <div className=\"category-text-color\">\n                          {category.category}\n                        </div>\n                      </div>\n                    </Link>\n                  )\n                } else {\n                  const categoryStyles = {\n                    boxShadow: `0 0 40px`,\n                    backgroundColor: category.color,\n                    color: category.color,\n                  }\n\n                  return (\n                    <Link\n                      style={categoryStyles}\n                      className=\"hero-category\"\n                      key={index}\n                      to={`/${slugify(category.category).toLowerCase()}`}\n                    >\n                      <div className=\"overlay\">\n                        <div className=\"category-text-color\">\n                          {category.category}\n                        </div>\n                      </div>\n                    </Link>\n                  )\n                }\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </HeroStyles>\n  )\n}\n\nexport const HeroStyles = styled.header`\n  border-bottom: 1px solid var(--primary-1);\n\n  .hero {\n    display: flex;\n    padding: 6rem 0;\n    align-items: center;\n    justify-content: center;\n    max-width: 83vw;\n    margin: 0 auto;\n  }\n\n  @media only screen and (min-width: 1600px) {\n    .hero {\n      max-width: 75vw;\n    }\n  }\n\n  .row {\n    align-items: center;\n  }\n\n  .hero-text {\n    padding-right: 3rem;\n  }\n\n  .hero h1 {\n    line-height: 5rem;\n  }\n\n  .hero h1 span {\n    display: inline-block;\n    position: relative;\n    font-size: 110%;\n  }\n\n  .hero h1 span::after {\n    position: absolute;\n    content: '';\n    background-color: #ace7ff;\n    width: 100%;\n    height: 15px;\n    left: 0;\n    bottom: 11px;\n    z-index: -1;\n  }\n\n  .hero h4 {\n    color: var(--grey-8);\n    margin-bottom: 1.5rem;\n    text-transform: uppercase;\n    font-size: 17px;\n  }\n\n  .hero p {\n    font-size: 20px;\n  }\n\n  .hero-categories {\n    /* flex-wrap: wrap; */\n  }\n\n  .category-text-color {\n    color: var(--grey-6);\n  }\n\n  .hero-category {\n    /* background-color: #b8ffec; */\n    padding: 0rem 2rem;\n    line-height: 60px;\n    margin: 25px 25px 0 0;\n    border-radius: 10px;\n    color: #3a3838;\n    min-width: 80px;\n    display: inline-block;\n    transition: all 0.1s linear;\n\n    &:hover {\n      filter: brightness(103%);\n      transition: all 0.1s linear;\n    }\n\n    /* box-shadow: 0 0 25px black; */\n  }\n\n  .hero-category:hover > .overlay {\n    width: 100%;\n    height: 100%;\n    opacity: 0.95;\n    transition-duration: 0.2s;\n  }\n\n  @media only screen and (max-width: 460px) {\n    .hero-categories {\n      text-align: center;\n    }\n  }\n\n  @media only screen and (max-width: 1147px) {\n    .hero-category {\n      font-size: 90%;\n    }\n  }\n  @media only screen and (max-width: 1092px) {\n    .hero-category {\n      padding: 0 1.2rem;\n    }\n  }\n  @media only screen and (max-width: 991px) {\n    .hero-categories {\n      text-align: center;\n    }\n  }\n\n  @media only screen and (max-width: 502px) {\n    .hero-category,\n    h4,\n    h1,\n    p {\n      text-align: center;\n    }\n\n    .hero-text {\n      padding: 0;\n    }\n  }\n\n  @media only screen and (max-width: 358px) {\n    h1 {\n      font-size: 2.6rem;\n    }\n  }\n`\n\nexport default Hero\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { AiOutlineClockCircle } from 'react-icons/ai'\nimport { GoCalendar } from 'react-icons/go'\nimport { Link } from 'gatsby'\nimport SidebarWide from './Sidebar/indexWide'\nimport { getColor } from './utils/heroCategories'\nimport slugify from 'slugify'\nimport '../components/featured/features-styles.scss'\n\nconst RecentPosts = () => {\n  const data = useStaticQuery(query)\n\n  const {\n    allMdx: { nodes: posts },\n  } = data\n\n  return (\n    <section className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-lg-8 col-12\">\n          <h2 className=\"section-title\">Recent Articles</h2>\n\n          {posts.map(post => {\n            const { title, category, date, slug, image } = post.frontmatter\n\n            return (\n              <article\n                key={post.id}\n                className=\"card card-bg card-shadow recent-article-mb\"\n              >\n                <Link\n                  to={`/${category.toLowerCase()}/${\n                    slug || slugify(title, { lower: true })\n                  }`}\n                >\n                  <GatsbyImage\n                    image={getImage(image)}\n                    alt={title}\n                    className=\"img\"\n                  />\n                  {/* <img className='top-and-popular-img' src={imageSource} alt={title} /> */}\n                </Link>\n\n                <div className=\"card-body\">\n                  <Link\n                    to={`/${category.toLowerCase()}/${\n                      slug || slugify(title, { lower: true })\n                    }`}\n                  >\n                    <h3 className=\"recent-articles-heading\">{title}</h3>\n                  </Link>\n\n                  <ul className=\"card-meta list-inline\">\n                    <li className=\"list-inline-item\">\n                      <AiOutlineClockCircle />\n                      {Math.ceil(post.fields.timeToRead.words / 275)} Min Read\n                    </li>\n                    <li className=\"list-inline-item\">\n                      <GoCalendar /> {date}\n                    </li>\n                    <li className=\"list-inline-item\">\n                      <ul className=\"card-meta-tag list-inline\">\n                        <li className=\"list-inline-item\">\n                          <Link\n                            to={`/${category.toLowerCase()}`}\n                            className=\"category-link\"\n                            style={{\n                              color: getColor(category),\n                              backgroundColor: getColor(category),\n                            }}\n                          >\n                            <div className=\"category-text-color\">\n                              {category}\n                            </div>\n                          </Link>\n                        </li>\n                      </ul>\n                    </li>\n                  </ul>\n                  <Link\n                    to={`/${category.toLowerCase()}/${\n                      slug || slugify(title, { lower: true })\n                    }`}\n                  >\n                    <p className=\"excerpt\">{post.excerpt}</p>\n                  </Link>\n                  <a\n                    className=\"btn btn-outline-primary\"\n                    href={`/${category.toLowerCase()}/${slugify(title, {\n                      lower: true,\n                    })}`}\n                  >\n                    Read More\n                  </a>\n                </div>\n              </article>\n            )\n          })}\n        </div>\n        <SidebarWide />\n      </div>\n    </section>\n  )\n}\n\nexport const query = graphql`\n  query RecentPosts {\n    allMdx(sort: { frontmatter: { date: DESC } }, limit: 3) {\n      nodes {\n        excerpt\n        frontmatter {\n          title\n          category\n          date(formatString: \"MMMM, Do YYYY\")\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: CONSTRAINED)\n            }\n          }\n        }\n        id\n        fields {\n          timeToRead {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default RecentPosts\n","import React from 'react'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { AiOutlineClockCircle } from 'react-icons/ai'\nimport { GoCalendar } from 'react-icons/go'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Link } from 'gatsby'\nimport { getColor } from '../utils/heroCategories'\nimport slugify from 'slugify'\nimport './features-styles.scss'\n\nconst query = graphql`\n  query Top {\n    allMdx(\n      limit: 1\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { topPick: { eq: true } } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMM, Do YYYY\")\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED, placeholder: BLURRED)\n            }\n          }\n          category\n        }\n        id\n\n        excerpt(pruneLength: 60)\n        fields {\n          timeToRead {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Top = () => {\n  const data = useStaticQuery(query)\n\n  const {\n    allMdx: { nodes: posts },\n  } = data\n\n  return (\n    <div className=\"col-md-4 col-12\">\n      <h2 className=\"section-title\">Top Article</h2>\n\n      {posts.map(post => {\n        const { title, category, date, image } = post.frontmatter\n\n        return (\n          <article key={post.id} className=\"card card-bg card-shadow\">\n            <Link\n              to={`/${category.toLowerCase()}/${slugify(title, {\n                lower: true,\n              })}`}\n            >\n              <GatsbyImage\n                image={getImage(image)}\n                alt={title}\n                className=\"img\"\n              />\n              {/* <img className='top-and-popular-img' src={imageSource} alt={title} /> */}\n            </Link>\n\n            <div className=\"card-body\">\n              <Link\n                to={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                <h3>{title}</h3>\n              </Link>\n\n              <ul className=\"card-meta list-inline\">\n                <li className=\"list-inline-item\">\n                  <AiOutlineClockCircle />\n                  {Math.ceil(post.fields.timeToRead.words / 275)} Min Read\n                </li>\n                <li className=\"list-inline-item\">\n                  <GoCalendar /> {date}\n                </li>\n                <li className=\"list-inline-item\">\n                  <ul className=\"card-meta-tag list-inline\">\n                    <li className=\"list-inline-item\">\n                      <Link\n                        to={`/${category.toLowerCase()}`}\n                        className=\"category-link\"\n                        style={{\n                          color: getColor(category),\n                          backgroundColor: getColor(category),\n                        }}\n                      >\n                        <div className=\"category-text-color\">{category}</div>\n                      </Link>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n              <Link\n                to={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                <p className=\"excerpt\">{post.excerpt}</p>\n              </Link>\n              <a\n                className=\"btn btn-outline-primary\"\n                href={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                Read More\n              </a>\n            </div>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Top\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { AiOutlineClockCircle } from 'react-icons/ai'\nimport { GoCalendar } from 'react-icons/go'\nimport slugify from 'slugify'\nimport './features-styles.scss'\n\nconst query = graphql`\n  query Trending {\n    allMdx(\n      limit: 3\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { trending: { eq: true } } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          category\n          date(formatString: \"MMM, Do YYYY\")\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                placeholder: BLURRED\n                height: 100\n                width: 100\n              )\n            }\n          }\n        }\n        id\n\n        fields {\n          timeToRead {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Trending = () => {\n  const data = useStaticQuery(query)\n\n  const {\n    allMdx: { nodes: posts },\n  } = data\n\n  return (\n    <div className=\"col-md-4 col-12\">\n      <h2 className=\"section-title trending-title\">Trending</h2>\n\n      {posts.map(post => {\n        const { title, category, date, image } = post.frontmatter\n\n        return (\n          <article\n            key={post.id}\n            className=\"card card-body card-bg card-shadow trending-card\"\n          >\n            <Link\n              to={`/${category.toLowerCase()}/${slugify(title, {\n                lower: true,\n              })}`}\n            >\n              <GatsbyImage\n                image={getImage(image)}\n                alt={title}\n                className=\"trending-img\"\n              />\n              {/* <img className='top-and-popular-img' src={imageSource} alt={title} /> */}\n            </Link>\n\n            <div className=\"trending-meta\">\n              <Link\n                to={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                <h3>{title}</h3>\n              </Link>\n\n              <ul className=\"card-meta list-inline\">\n                <li className=\"list-inline-item\">\n                  <AiOutlineClockCircle />\n                  {Math.ceil(post.fields.timeToRead.words / 275)} Min Read\n                </li>\n                <li className=\"list-inline-item\">\n                  <GoCalendar /> {date}\n                </li>\n              </ul>\n            </div>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Trending\n","import React from 'react'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { AiOutlineClockCircle } from 'react-icons/ai'\nimport { GoCalendar } from 'react-icons/go'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Link } from 'gatsby'\nimport { getColor } from '../utils/heroCategories'\nimport slugify from 'slugify'\nimport './features-styles.scss'\n\nconst query = graphql`\n  query Popular {\n    allMdx(\n      limit: 1\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { popular: { eq: true } } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMM, Do YYYY\")\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED, placeholder: BLURRED)\n            }\n          }\n          category\n        }\n        id\n        excerpt(pruneLength: 60)\n        fields {\n          timeToRead {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Popular = () => {\n  const data = useStaticQuery(query)\n\n  const {\n    allMdx: { nodes: posts },\n  } = data\n\n  return (\n    <div className=\"col-md-4 col-12\">\n      <h2 className=\"section-title\">Popular</h2>\n\n      {posts.map(post => {\n        const { title, category, date, image } = post.frontmatter\n\n        return (\n          <article key={post.id} className=\"card card-bg card-shadow\">\n            <Link\n              to={`/${category.toLowerCase()}/${slugify(title, {\n                lower: true,\n              })}`}\n            >\n              <GatsbyImage\n                image={getImage(image)}\n                alt={title}\n                className=\"img\"\n              />\n              {/* <img className='top-and-popular-img' src={imageSource} alt={title} /> */}\n            </Link>\n\n            <div className=\"card-body\">\n              <Link\n                to={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                <h3>{title}</h3>\n              </Link>\n\n              <ul className=\"card-meta list-inline\">\n                <li className=\"list-inline-item\">\n                  <AiOutlineClockCircle />\n                  {Math.ceil(post.fields.timeToRead.words / 275)} Min Read\n                </li>\n                <li className=\"list-inline-item\">\n                  <GoCalendar /> {date}\n                </li>\n                <li className=\"list-inline-item\">\n                  <ul className=\"card-meta-tag list-inline\">\n                    <li className=\"list-inline-item\">\n                      <Link\n                        to={`/${category.toLowerCase()}`}\n                        className=\"category-link\"\n                        style={{\n                          color: getColor(category),\n                          backgroundColor: getColor(category),\n                        }}\n                      >\n                        <div className=\"category-text-color\">{category}</div>\n                      </Link>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n              <Link\n                to={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                <p className=\"excerpt\">{post.excerpt}</p>\n              </Link>\n              <a\n                className=\"btn btn-outline-primary\"\n                href={`/${category.toLowerCase()}/${slugify(title, {\n                  lower: true,\n                })}`}\n              >\n                Read More\n              </a>\n            </div>\n          </article>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Popular\n","import React from 'react'\nimport styled from 'styled-components'\nimport Top from './Top'\nimport Trending from './Trending'\nimport Popular from './Popular'\nimport './features-styles.scss'\n\nconst Featured = () => {\n  return (\n    <FeaturedStyles>\n      <div className=\"featured-section container\">\n        <div className=\"row\">\n          <Top />\n          <Trending />\n          <Popular />\n        </div>\n      </div>\n    </FeaturedStyles>\n  )\n}\n\nexport const FeaturedStyles = styled.section`\nborder-bottom: 1px solid var(--primary-1);\n\n  .featured-section {\n    padding: 5rem 0;\n  }\n\n  @media screen and (max-width: 767px) {\n    .featured-section{\n      padding: 0 0 5rem 0;\n    }\n  }\n\n  @media screen and (max-width: 576px) {\n    .featured-section{\n      padding: 0 15px 0 15px;\n    }\n  }\n`\n\nexport default Featured\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\n\nconst Notification = () => {\n  return (\n    <NotificationStyles>\n      <div className=\"notification-top-bar\">\n        <p>Revista is looking for contributors!</p>\n        <Link to=\"/support-us\">Support Us</Link>\n      </div>\n    </NotificationStyles>\n  )\n}\n\nexport const NotificationStyles = styled.div`\n  border-bottom: 1px solid var(--primary-1);\n  padding: 5rem 0;\n  margin-bottom: 5rem;\n\n  .notification-top-bar {\n    box-shadow: 0 0 34px var(--primary-6);\n    height: 50px;\n    line-height: 50px;\n    width: 100%;\n    background: linear-gradient(\n      90deg,\n      var(--primary-5) 0%,\n      var(--primary-6) 100%\n    );\n    text-align: center;\n    color: #ffffff;\n    font-family: sans-serif;\n    font-weight: lighter;\n    font-size: 14px;\n    width: 50%;\n    margin: 0 auto;\n    border-radius: 5px;\n  }\n  .notification-top-bar p {\n    padding: 0;\n    margin: 0;\n    color: #ffffff;\n    display: inline;\n    font-size: 130%;\n  }\n  .notification-top-bar a {\n    padding: 5px 12px;\n    border-radius: 3px;\n    background: #fff;\n    color: var(--primary-7);\n    font-weight: 500;\n    text-decoration: none;\n    margin-left: 1rem;\n    font-size: 130%;\n    font-weight: 500;\n    transition: all 0.2s linear;\n\n    &:hover {\n      background-color: #f4f4f4;\n      color: var(--primary-8);\n    }\n  }\n\n  @media screen and (max-width: 815px) {\n    .notification-top-bar {\n      height: 100%;\n      line-height: 40px;\n      padding: 1rem;\n    }\n    .notification-top-bar p {\n      display: block;\n    }\n\n    .notification-top-bar a {\n      margin-left: 0;\n    }\n  }\n\n  @media screen and (max-width: 979px) {\n    .notification-top-bar {\n      width: 90vw;\n    }\n  }\n\n  @media screen and (max-width: 351px) {\n    .notification-top-bar p {\n      font-size: 120%;\n    }\n  }\n\n  @media screen and (max-width: 335px) {\n    .notification-top-bar {\n      padding: 1rem 0;\n    }\n  }\n`\n\nexport default Notification\n","import React from 'react'\nimport Hero from '../components/Hero'\nimport Layout from '../components/Layout'\nimport RecentPosts from '../components/RecentPosts'\nimport { graphql } from 'gatsby'\nimport Featured from '../components/featured/Featured'\nimport Seo from '../components/SEO'\nimport Notification from '../components/Notification'\n\nconst IndexPage = ({ data }) => {\n  const {\n    allMdx: { nodes: posts },\n  } = data\n  const {\n    site: { siteMetadata: metadata },\n  } = data\n  return (\n    <Layout>\n      <Seo\n        title={`${metadata.title} | Free Unbiased News for Everyone`}\n        description={metadata.description.substr(0, 160)}\n      />\n\n      <Hero />\n\n      <Featured />\n      <Notification />\n      <RecentPosts posts={posts} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery Home {\n  allMdx(limit: 3, sort: {frontmatter: {date: DESC}}) {\n    nodes {\n      excerpt\n      frontmatter {\n        title\n        category\n        date(formatString: \"MMMM, Do YYYY\")\n        image {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n      id\n    }\n  }\n  site {\n    siteMetadata {\n      title\n      description\n      image\n    }\n  }\n}\n`\n\nexport default IndexPage\n"],"names":["SidebarStyles","styled","className","HeroStyles","categories","category","index","arr","length","categoryStyles","boxShadow","backgroundColor","color","style","key","to","slugify","toLowerCase","query","data","useStaticQuery","allMdx","nodes","posts","map","post","title","date","slug","image","frontmatter","id","lower","G","getImage","alt","Math","ceil","fields","timeToRead","words","getColor","excerpt","href","FeaturedStyles","NotificationStyles","site","siteMetadata","metadata","Layout","description","substr"],"sourceRoot":""}